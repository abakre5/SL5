import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;

public class ClicksPerIp
{
	static IntWritable ONE = new IntWritable(1);
	
	public static void main(String args[]) throws IOException, ClassNotFoundException, InterruptedException
	{
		Configuration conf = new Configuration();
		Job job = Job.getInstance(conf,"ClicksPerIP");
		
		job.setJarByClass(ClicksPerIP.class);
		
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(IntWritable.class);
		
		job.setMapperClass(ClicksPerIPMap.class);
		job.setCombinerClass(ClicksPerIPReduce.class);
		job.setReducerClass(ClicksPerIPReduce.class);
		
		job.setInputFormatClass(TextInputFormat.class);
		job.setOutputFormatClass(TextOutputFormat.class);
		
		FileInputFormat.addInputPath(job, new Path(args[0]));
		FileOutputFormat.setOutputPath(job, new Path(args[1]));
		
		job.waitForCompletion(true);
	}
	
	public static class ClicksPerIPMap extends Mapper<LongWritable,Text,Text,IntWritable>
	{
		Text mapKey = new Text();
		
		public void map(LongWritable key,Text value,Context context) throws IOException, InterruptedException
		{
			String line = value.toString();
			String[] data = line.trim().split("- -");
			if(data.length > 1)
			{
				String ipAddress = data[0];
				mapKey.set(ipAddress);
				context.write(mapKey, ONE);
			}
		}
	}
	
	public static class ClicksPerIPReduce extends Reducer<Text,IntWritable,Text,IntWritable>
	{
		public void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException
		{
			int count = 0;
			
			for(IntWritable val: values)
				count += val.get();
			
			context.write(key, new IntWritable(count));
		}
	}
}