

#include "mpi.h"
#include<stdio.h>
#include<stdlib.h>
#include<string.h>

#define MAX 1000

int main( int argc, char **argv )
{
    MPI_Comm client;
    MPI_Status status;
    char port_name[MPI_MAX_PORT_NAME];
    char str[MAX], ch, temp;
    int size, flag, i=0, j=0,no,count=0,fact=1;

	MPI_Init( &argc, &argv );
    MPI_Comm_size(MPI_COMM_WORLD, &size);

 	if (size != 1)
 	{
	 	fprintf(stderr, "Server too big");
	 	exit(EXIT_FAILURE);
 	}

    MPI_Open_port(MPI_INFO_NULL, port_name);
   	printf("Server running at %s\n", port_name);

    while (1)
    {
        MPI_Comm_accept( port_name, MPI_INFO_NULL, 0, MPI_COMM_WORLD, &client );
        flag = 1;

        while (flag)
        {
            MPI_Recv( &ch, 1, MPI_CHAR, MPI_ANY_SOURCE, MPI_ANY_TAG, client, &status );

            switch (status.MPI_TAG)
            {
                case 0: /* Finish */
                		MPI_Comm_free( &client );
                        MPI_Close_port(port_name);
                        MPI_Finalize();
                        return 0;

                case 1:  printf("\nReceived number : %s\n", str);
			no= atoi(str);
		printf("\nReceived String to integer: %d\n", no);


			for (i = 1; i <= no; i++)
    			fact = fact * i;


  				printf("Factorial of %d = %d\n", no, fact);

					        	MPI_Send(&fact, 1, MPI_INT, 0, 2, client);
						 MPI_Comm_disconnect( &client );

						 flag = 0;
						 break;

                case 2: /* Accept string */
                		str[i++] = ch;
                		str[i] = '\0';
                		break;


                default: /* Erroneous message type */
                         MPI_Abort( MPI_COMM_WORLD, 1 );
            }
        }
    }


  return 0;
}

